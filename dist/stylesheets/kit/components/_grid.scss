/**
 * Component Grid.
 * @author David Sklar <david.sklar@datasapiens.co.uk>
 */

// =============================================================================
// Grid
// =============================================================================

/**
 * Simple grid based on `flexbox`.
 *
 * TDDO:
 *  - Implement grid item vertical alignment.
 *  - Implement grid items reversed order.
 *  - Resolve spanned grid items responsibility.
 *
 * @link https://philipwalton.github.io/solved-by-flexbox/demos/grids/
 */

.grd {
    display: flex;
    flex-direction: column;
    margin-left: (-1) * $grid-gutter;

    @media (min-width: nth($grid-breaks, 1)) {
        flex-flow: row wrap;
    }
}

/**
 * Modifiers.
 */

.grd {
    @each $cols in $grid-columns {
        $index: 0;

        &.\--#{$cols} {
            & > .grd__item {
                flex: 0 0 percentage(1 / $cols);

                @each $break in $grid-breaks {
                    $index: $index + 1;

                    @if $cols > $index {
                        @media (min-width: $break) {
                            flex-basis: percentage(1 / ($index + 1));
                        }
                    }
                }
            }
        }
    }
}

/**
 * States.
 */

// .is-component-state {}

// .component {
//     &.is-state {}
// }

/**
 * Context.
 */

// .has-component {}

// =============================================================================
// Subcomponents
// =============================================================================

// Grid item
// =============================================================================

.grd__item {
    flex: 1;
    display: flex;

    &::before {
        content: "";
        flex: 0 0 $grid-gutter;
    }

    // & + & {
    //     margin-top: $grid-gutter;
    // }

    & > div {
        @extend %grd__item__content;
    }

    @if $grid-debug {
        @extend %debug !optional;

        &::before {
            background: cyan;
        }
    }
}

/**
 * Modifiers.
 */

/**
 * Grid item, spanned across multiple columns.
 * FIX: This doesn't compute!
 */

.grd__item {
    $max: list-max($grid-columns);

    @for $i from 2 through $max {
        &.\--span-#{$i}[class] {
            flex: {
                // basis: 100%;
                grow: $i;
            }
        }
    }
}

// Grid item content
// =============================================================================

%grd__item__content {
    flex: 1 1 100%;
    // overflow: hidden;
}
