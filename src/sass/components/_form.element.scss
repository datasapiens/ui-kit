/**
 * Component Form/Element.
 *
 * @requires {placeholder} %emt
 * @requires {placeholder} %emt--medium
 * @requires element
 */

// =============================================================================
// Form element
// =============================================================================

body.theme {
    @include defineColor(--form-element-background-color, var(--white-color-opacity-85));
    @include defineColor(--form-element-border-color, var(--neutral-60-color));
    @include defineColor(--form-element-color, var(--base-color));
    @include defineColor(--form-element--is-disabled-border-color, var(--neutral-80-color));
    @include defineColor(--form-element--is-disabled-color, var(--base-color-lighten-30));
    @include defineColor(--form-element--is-focused-border-color, var(--notice-accent-50-color));
    @include defineColor(--form-element--is-focused-color, var(--base-color-darken-50));
    @include defineColor(--form-element--is-hovered-border-color, var(--notice-accent-50-color));
    @include defineColor(--form-element--is-invalid-background-color, var(--danger-accent-50-color-lighten-35));
    @include defineColor(--form-element--is-invalid-border-color, var(--danger-accent-50-color));
    @include defineColor(--form-element--is-invalid-color, var(--base-color));
}

%form-element {
    @extend %emt !optional;
    @extend %emt--medium !optional;

    align-items: center;
    
    background-color: map-get($form-element-background, initial);
    background-color: var(--form-element-background-color, map-get($form-element-background, initial));

    border: $form-element-border-size solid map-get($form-element-border-color, initial);
    border: $form-element-border-size solid var(--form-element-border-color, map-get($form-element-border-color, initial));

    border-radius: $form-element-border-radius;

    color: map-get($form-element-color, initial);
    color: var(--form-element-color, map-get($form-element-color, initial));

    display: inline-flex;
    padding: 0 $form-element-indent;
    transition:
        background-color 0.2s,
        border-color 0.2s,
        color 0.2s,
        width 0.2s;
    width: 100%;

    /**
     * Chrome `vertical-align` issue workaround.
     */

    @supports (-webkit-appearance: none) {
        vertical-align: bottom ;
    }

    @include ie-gte-10 {
        display: inline-block;
    }
}

.form-element {
    @extend %form-element;
}

/**
 * Modifiers.
 */

/**
 * Form element, transparent.
 */

%form-element {
    &.--transparent {
        background: transparent;
        border: 0;
        // border-color: transparent;

        @if $form-element-border-radius {
            border-radius: 0;
        }
    }
}

/**
 * States.
 */

/**
 * Form element, active.
 */

%form-element {
    &.is-active {
        @extend %form-element:focus;
    }
}

/**
 * Form element, disabled.
 */

%form-element {
    &:disabled,
    &.is-disabled {
        border-color: map-get($form-element-border-color, disable);
        border-color: var(--form-element--is-disabled-border-color, map-get($form-element-border-color, disable));

        color: map-get($form-element-color, disable);
        color: var(--form-element--is-disabled-color, map-get($form-element-color, disable));
        cursor: not-allowed;
    }
}

/**
 * Form element, focused.
 */

%form-element {
    &.is-focused,
    &:focus {
        &:not(:disabled):not(.is-disabled):not([readonly]):not(.is-readonly) {
            border-color: map-get($form-element-border-color, focus);
            border-color: var(--form-element--is-focused-border-color, map-get($form-element-border-color, focus));

            color: map-get($form-element-color, focus);
            color: var(--form-element--is-focused-color, map-get($form-element-color, focus));
        }
    }
}

/**
 * Form element, hovered.
 */

%form-element {
    &:hover,
    &.is-hovered {
        &:not(:disabled):not(.is-disabled):not([readonly]):not(.is-readonly) {
            border-color: map-get($form-element-border-color, hover);
            border-color: var(--form-element--is-hovered-border-color, map-get($form-element-border-color, hover));
        }
    }
}

/**
 * Form element, invalid.
 */

%form-element {
    // &:invalid,
    &.is-invalid {
        background-color: map-get($form-element-background, invalid);
        background-color: var(--form-element--is-invalid-background-color, map-get($form-element-background, invalid));

        border-color: map-get($form-element-border-color, invalid);
        border-color: var(--form-element--is-invalid-border-color, map-get($form-element-border-color, invalid));

        color: map-get($form-element-color, invalid);
        color: var(--form-element--is-invalid-color, map-get($form-element-color, invalid));
    }
}

/**
 * Form element, read-only.
 */

%form-element {
    &[readonly],
    &.is-readonly {
        // @extend %form-element:disabled;
    }
}

/**
 * Context.
 */

// .has-component {}

// =============================================================================
// Subcomponents
// =============================================================================

// SubcomponentName
// =============================================================================

// .component__subcomponent {}
