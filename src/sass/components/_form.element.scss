/**
 * Component Form/Element.
 */

// =============================================================================
// Form element
// =============================================================================

%form-element {
    $size: map-get($form-element-size, medium);

    background-color: map-get($form-element-background, initial);
    border: $form-element-border-size solid map-get($form-element-border-color, initial);
    border-radius: $form-element-border-radius;
    color: map-get($form-element-color, initial);
    font: {
        size: px-to-rem(map-get($form-element-font-size, medium));
    }
    height: $size;
    line-height: $size;
    padding: 0 $form-element-indent;
    transition: background-color 0.2s,
        border-color 0.2s,
        color 0.2s,
        width 0.2s;
    width: 100%;
}

/**
 * Modifiers.
 */

/**
 * Form element, transparent.
 */

%form-element--transparent {
    background: transparent;
    border: 0;

    @if $form-element-border-radius {
        border-radius: 0;
    }
}

/**
 * Form element length.
 */

.form-element {
    @each $modifier, $length in $form-element-length {
        &.--#{$modifier} {
            max-width: $length;
        }
    }
}

/**
 * Form element large.
 */

.form-element {
    &.--large {
        $size: map-get($form-element-size, large);

        font-size: px-to-rem(map-get($form-element-font-size, large));
        height: $size;
        line-height: $size;
    }
}

/**
 * Form element small.
 */

.form-element {
    &.--small {
        $size: map-get($form-element-size, small);

        font-size: px-to-rem(map-get($form-element-font-size, small));
        height: $size;
        line-height: $size;
    }
}

/**
 * Form element, primary.
 */

// %form-element {
//     &.--primary {
//         border-color: map-get($form-element--primary-border, initial);
//     }
// }

/**
 * Form element, secondary.
 */

// %form-element {
//     &.--secondary {
//         background-color: map-get($form-element--secondary-background, initial);
//         border-color: map-get($form-element--secondary-border, initial);
//     }
// }

/**
 * States.
 */

/**
 * Form element, active.
 */

%form-element {
    &.is-active {
        @extend %form-element:focus;
    }
}

/**
 * Form element, disabled.
 */

%form-element {
    &:disabled,
    &.is-disabled {
        border-color: map-get($form-element-border-color, disable);
        color: map-get($form-element-color, disable);
        cursor: not-allowed;
    }

    // &.--primary {
    //     &:disabled,
    //     &.is-disabled {
    //         border-color: map-get($form-element--primary-border, disable);
    //         color: map-get($form-element--primary-color, disable);
    //     }
    // }
    // &.--secondary {
    //     &:disabled,
    //     &.is-disabled {
    //         border-color: map-get($form-element--secondary-border, disable);
    //         color: map-get($form-element--secondary-color, disable);
    //     }
    // }
}

/**
 * Form element, focused.
 */

%form-element {
    &.is-focused,
    &:focus {
        &:not(:disabled):not(.is-disabled):not([readonly]):not(.is-readonly) {
            border-color: map-get($form-element-border-color, focus);
            color: map-get($form-element-color, focus);
        }
    }

    // &.--primary {
    //     &.is-focused,
    //     &:focus {
    //         &:not(:disabled):not(.is-disabled):not([readonly]):not(.is-readonly) {
    //             border-color: map-get($form-element--primary-border, focus);
    //             color: map-get($form-element--primary-color, focus);
    //         }
    //     }
    // }
    // &.--secondary {
    //     &.is-focused,
    //     &:focus {
    //         &:not(:disabled):not(.is-disabled):not([readonly]):not(.is-readonly) {
    //             background-color: map-get($form-element--secondary-background, focus);
    //             border-color: map-get($form-element--secondary-border, focus);
    //             color: map-get($form-element--secondary-color, focus);
    //         }
    //     }
    // }
}

/**
 * Form element, hovered.
 */

%form-element {
    &:hover,
    &.is-hovered {
        &:not(:disabled):not(.is-disabled):not([readonly]):not(.is-readonly) {
            border-color: map-get($form-element-border-color, hover);
        }
    }

    // &.--primary {
    //     &:hover,
    //     &.is-hovered {
    //         &:not(:disabled):not(.is-disabled):not([readonly]):not(.is-readonly) {
    //             border-color: map-get($form-element--primary-border, hover);
    //         }
    //     }
    // }
    // &.--secondary {
    //     &:hover,
    //     &.is-hovered {
    //         &:not(:disabled):not(.is-disabled):not([readonly]):not(.is-readonly) {
    //             background-color: map-get($form-element--secondary-background, hover);
    //             border-color: map-get($form-element--secondary-border, hover);
    //         }
    //     }
    // }
}

/**
 * Form element, invalid.
 */

%form-element {
    // &:invalid,
    &.is-invalid {
        background-color: map-get($form-element-background, invalid);
        border-color: map-get($form-element-border-color, invalid);
        color: map-get($form-element-color, invalid);
    }
}

/**
 * Form element, read-only.
 */

%form-element {
    &[readonly],
    &.is-readonly {
        @extend %form-element:disabled;
    }
}

/**
 * Form element, required.
 */

.form-element {
    // &[required],
    &.is-required {
        &::after {
            content: "*";
            display: inline-block;
            margin-left: 0.25em;
        }
    }
}

/**
 * Context.
 */

// .has-component {}

// =============================================================================
// Subcomponents
// =============================================================================

// SubcomponentName
// =============================================================================

// .component__subcomponent {}
